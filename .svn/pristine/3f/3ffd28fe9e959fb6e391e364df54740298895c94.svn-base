package gui;

import model.Workspace;

import tree.listener.JTreeController;
import tree.view.TreeCellRendered;
import tree.view.TreeEditor;
import tree.view.TreePopUp;
import view.WorkspaceView;

import java.awt.BorderLayout;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

import actions.manager.ActionManager;
import errorHandling.ErrorHandler;
import errorHandling.ErrorHandlerView;

public class MainFrame extends JFrame {

	private static MainFrame instance = null;

	private JTree tree = null;
	private WorkspaceView workspaceView = null;
	private MenuBar menuBar = null;
	private Workspace ws;
	private ActionManager actionManager = new ActionManager();
	private ToolBar toolBar = null;
	private SlotToolbarGerudok slotToolBar = null;
	private File workspaceFile;
	private ErrorHandlerView errorHandlerView;

	private MainFrame() {
		super();
		workspaceFile = new File("workspaceContext/cache.grws");
		errorHandlerView=new ErrorHandlerView();
		ErrorHandler.getInstance().addObserver(errorHandlerView);
		
	}

	private void initMainFrameGerudok() {

		setTitle("WeGotSolutions");

		// podesavanje velicine i pozicije prozora
		Toolkit kit = Toolkit.getDefaultToolkit();
		int height = kit.getScreenSize().height;
		int width = kit.getScreenSize().width;
		setSize((int) (width * 0.6), (int) (height * 0.8));
		setLocationRelativeTo(null);
		addWindowListener(new NewWindowListener());

		// Postavljanje ikonice
		setIconImage(new ImageIcon("images/puzzle.png").getImage());
		setVisible(true);

		menuBar = new MenuBar();
		setJMenuBar(menuBar);

		toolBar = new ToolBar();
		add(toolBar, BorderLayout.NORTH);
		slotToolBar = new SlotToolbarGerudok();
		add(slotToolBar, BorderLayout.EAST);

		workspaceView = new WorkspaceView();
		tree = initializeTree(workspaceView);
		JScrollPane sp = new JScrollPane(tree);
		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sp, workspaceView);
		add(splitPane, BorderLayout.CENTER);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		setVisible(true);
		splitPane.setDividerLocation(0.2);
		workspaceFile = new File("workspaceContext/cache.grws");

	}

	public SlotToolbarGerudok getSlotToolBar() {
		return slotToolBar;
	}

	public void setSlotToolBar(SlotToolbarGerudok slotToolBar) {
		this.slotToolBar = slotToolBar;
	}

	public void setToolBar(ToolBar toolBar) {
		this.toolBar = toolBar;
	}
	
	public void setWorkspace(Workspace workspace) {
		if (workspace == null)
			return;
		this.ws = workspace;
	}

	private JTree initializeTree(WorkspaceView workspaceView) {
		Workspace root = Workspace.getInstance();
		root.addObserver(workspaceView);
		setWs(root);
		JTree tree = new JTree(root);
		tree.setModel(new DefaultTreeModel(root));
		tree.addTreeSelectionListener(new JTreeController());
		tree.setCellEditor(new TreeEditor(tree, new DefaultTreeCellRenderer()));
		tree.setCellRenderer(new TreeCellRendered());
		tree.setComponentPopupMenu(new TreePopUp());
		tree.setEditable(true);



		return tree;
	}
	
	public void setTree(JTree tree) {
		this.tree = tree;
		
	}

	public Workspace openWorkspaceContext() {
		workspaceFile = new File("workspaceContext/cache.grws");
		try {
			ObjectInputStream obs = new ObjectInputStream(new FileInputStream(workspaceFile));
			Workspace ws = null;
			try {
				ws = (Workspace) obs.readObject();
			} catch (Exception e1) {
				e1.printStackTrace();
			}

			return ws;
		} catch (Exception e2) {
			e2.printStackTrace();
		}

		return null;

	}

	public File getWorkspaceFile() {
		workspaceFile = new File("workspaceContext/cache.grws");
		return workspaceFile;
	}

	public void setWorkspaceFile(File workspaceFile) {
		workspaceFile = new File("workspaceContext/cache.grws");
		this.workspaceFile = workspaceFile;
	}

	public static MainFrame getInstance() {
		if (instance == null) {
			instance = new MainFrame();
			instance.initMainFrameGerudok();
		}

		return instance;
	}

	public JTree getTree() {
		return tree;
	}

	public WorkspaceView getWorkspaceView() {
		return workspaceView;
	}

	public MenuBar getMenu() {
		return menuBar;
	}

	public ToolBar getToolBar() {
		return toolBar;
	}

	public Workspace getWs() {
		return ws;
	}

	public void setWs(Workspace ws) {
		this.ws = ws;
	}

	public ActionManager getActionManager() {
		return actionManager;
	}

	public void setActionManager(ActionManager actionManager) {
		this.actionManager = actionManager;
	}

}
