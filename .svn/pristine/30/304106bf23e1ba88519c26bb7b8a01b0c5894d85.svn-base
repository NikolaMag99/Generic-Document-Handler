package view;

import enums.Handle;
import events.PageEvent;
import events.PageEvent.PageEventType;
import gui.MainFrame;
import model.Page;
import model.elements.SlotDevice;
import state.ResizeState;
import state.StateManager;
import view.painters.Handler;
import view.painters.SlotView;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;


public class PageView extends JPanel implements Observer {


    public static final int PAGE_HEIGHT = 380;
    public static final int PAGE_WIDTH = 300;


    DocumentView docView;
    Page page;
    String name;
    ArrayList<SlotView> slotViews = new ArrayList<SlotView>();
    Handler handler;

    public PageView(DocumentView documentView, Page page) {
        this.docView = documentView;
        this.page = page;
        this.name = page.getName();
        setPreferredSize(new Dimension(PAGE_WIDTH, PAGE_HEIGHT));
        TitledBorder border = BorderFactory.createTitledBorder(name);
        border.setTitleColor(Color.BLACK);
        setBorder(border);
        this.page.addObserver(this);

        this.addMouseListener(new MouseController(this));
        this.addMouseMotionListener(new MouseMotionController(this));
        handler = new Handler();
    }

    @Override
    protected void paintComponent(Graphics g) {

        handler.setG2d((Graphics2D) g);

        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;

        if (page.getSelectSlot() != null) {
            page.getSlotDevices().remove(page.getSelectSlot());
            page.getSlotDevices().add(page.getSelectSlot());
        }


        for (SlotDevice sl : page.getSlotDevices()) {
            SlotView slPainter = sl.getSlotPainter();
            slPainter.paint(sl, g2);
        }

        if (page.getSelectSlot() != null && page.getStateManager().getState() instanceof ResizeState) {
            handler.setSelectedSlot(page.getSelectSlot());
            handler.paintSlotHandles();
        }
    }

    public DocumentView getDocumentView() {
        return (DocumentView) getParent().getParent().getParent();
    }

    public ArrayList<SlotView> getSlotViews() {
        return slotViews;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
        TitledBorder border = BorderFactory.createTitledBorder(name);
        border.setTitleColor(Color.BLACK);
        setBorder(border);
    }

    public Page getPage() {
        return page;
    }


    @Override
    public void update(Observable o, Object arg) {
        if (arg == null)
            return;

        PageEvent eventObject = (PageEvent) arg;

        if (eventObject.getType() == PageEventType.RENAME_PAGE) {
            this.name = page.getName();
            this.setName(name);

        } else if (eventObject.getType() == PageEventType.DRAW) {
            repaint();

        }
        MainFrame.getInstance().repaint();
        MainFrame.getInstance().revalidate();
        SwingUtilities.updateComponentTreeUI(MainFrame.getInstance().getTree());
    }

    private class MouseMotionController extends MouseMotionAdapter {
        private PageView pageView;

        public MouseMotionController(PageView p) {
            pageView = p;
        }

        @Override
        public void mouseMoved(MouseEvent event) {
            Page page = ((PageView) event.getComponent()).getPage();
            if (page.getSelectSlot() == null) {
                return;
            }
            Cursor cursor = handler.setMouseCursor((Point2D) event.getPoint());
            if (cursor != null)
                pageView.setCursor(cursor);
            else
                pageView.setCursor(Cursor.getDefaultCursor());

            if (!page.getSelectSlot().getSlotPainter().elementAt(event.getPoint()))
                pageView.setCursor(Cursor.getDefaultCursor());
        }

        @Override
        public void mouseDragged(MouseEvent event) {
            Handle handleForPoint = handler.getHandleForPoint(page.getSelectSlot(), event.getPoint());
            StateManager stateManager = page.getStateManager();
            if (handleForPoint != null) {
                stateManager.getState().setHandle(handleForPoint);
                stateManager.getState().mouseDragged(event);
                repaint();

            }

            if (page.getSelectSlot() != null) {
                stateManager.getState().mouseDragged(event);
                repaint();
            }
        }
    }

    private class MouseController extends MouseAdapter {
        private PageView pageView;

        public MouseController(PageView p) {
            pageView = p;
        }

        @Override
        public void mousePressed(MouseEvent event) {
            docView.setFocusPage(pageView, event);
            StateManager stateManager = page.getStateManager();
            if (stateManager == null || stateManager.getState() == null)
                return;
            if (stateManager.getState() instanceof ResizeState) {
                stateManager.getState().setGraphics(pageView.getGraphics());

            }
            stateManager.getState().mousePressed(event);
            pageView.repaint();

        }

        @Override
        public void mouseReleased(MouseEvent e) {
            System.out.println("Klik");
        }
    }
}
