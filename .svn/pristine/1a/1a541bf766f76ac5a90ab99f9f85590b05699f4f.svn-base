package gui;

import gui.segments.MenuBarGerudok;
import gui.segments.SlotToolbarGerudok;
import gui.segments.ToolBarGerudok;
import model.Workspace;

import tree.listener.JTreeControllerGerudok;
import tree.view.TreeCellRendered;
import tree.view.TreeEditor;
import tree.view.TreePopUp;
import view.WorkspaceView;

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;

import javax.swing.DropMode;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.WindowConstants;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;



import actions.manager.ActionManager;

public class MainFrameGerudok extends JFrame {

	private static MainFrameGerudok instance = null;
	
	private JTree tree = null;
	private WorkspaceView workspaceView = null;
	private MenuBarGerudok menuBar = null;
	private Workspace ws;
	private ActionManager actionManager = new ActionManager();
	private ToolBarGerudok toolBar = null;
	private SlotToolbarGerudok slotToolBar = null;
	private File workspaceFile;
	private Workspace wsmodel;


	
	private MainFrameGerudok() {
		super();
		workspaceFile = new File("workspaceContext/cache.grws");
	}
	
	private void initMainFrameGerudok() {
		


		setTitle("Paki");

		// podesavanje velicine i pozicije prozora
		Toolkit kit = Toolkit.getDefaultToolkit();
		int height = kit.getScreenSize().height;
		int width = kit.getScreenSize().width;
		setSize((int) (width * 0.6), (int) (height * 0.8));
		setLocationRelativeTo(null);
		addWindowListener( new NewWindowListener());

		// Postavljanje ikone
		Image img = kit.getImage("");
		setIconImage(img); 

		// MENUBAR
		menuBar = new MenuBarGerudok();
		setJMenuBar(menuBar);

		// TOOLBAR
		toolBar = new ToolBarGerudok();
		add(toolBar, BorderLayout.NORTH);
		slotToolBar = new SlotToolbarGerudok();
		add(slotToolBar, BorderLayout.EAST);
		

		// SPLIT PANE (WorkspaceView + JTREE)
		workspaceView = new WorkspaceView();
		//workspaceView.setBackground(getBackground());
		tree = initTree(workspaceView);
		JScrollPane sp = new JScrollPane(tree);
		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sp, workspaceView);
		add(splitPane, BorderLayout.CENTER);


		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		setVisible(true);
		splitPane.setDividerLocation(0.2);
		workspaceFile = new File("workspaceContext/cache.grws");
		
	}

	public SlotToolbarGerudok getSlotToolBar() {
		return slotToolBar;
	}

	public void setSlotToolBar(SlotToolbarGerudok slotToolBar) {
		this.slotToolBar = slotToolBar;
	}

	public void setToolBar(ToolBarGerudok toolBar) {
		this.toolBar = toolBar;
	}

	// Inicijalizacija JTreeGerudok
	private JTree initTree(WorkspaceView workspaceView) {
		Workspace root = new Workspace();
		root.addObserver(workspaceView);
		JTree tree = new JTree(root);
		tree.setModel(new DefaultTreeModel(root));
		tree.addTreeSelectionListener(new JTreeControllerGerudok());
		tree.setCellEditor(new TreeEditor(tree, new DefaultTreeCellRenderer()));
		tree.setCellRenderer(new TreeCellRendered());
		tree.setComponentPopupMenu(new TreePopUp());
		tree.setEditable(true);
		
		
		workspaceFile = new File("workspaceContext/cache.grws");
		

		//tree.getSelectionModel().setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
		//tree.setDragEnabled(true);
		//tree.setDropMode(DropMode.ON_OR_INSERT);

		
		return tree;
	}
	

	public static MainFrameGerudok getInstance() {
		if (instance == null)
		{
			instance = new MainFrameGerudok();
			instance.initMainFrameGerudok();
		}
	

		return instance;
	}

	public JTree getTree() {
		return tree;
	}


	
	public WorkspaceView getWorkspaceView() {
		return workspaceView;
	}

	public MenuBarGerudok getMenu() {
		return menuBar;
	}



	public ToolBarGerudok getToolBar() {
		return toolBar;
	}

	public Workspace getWs() {
		return ws;
	}

	public void setWs(Workspace ws) {
		this.ws = ws;
	}

	public ActionManager getActionManager() {
		return actionManager;
	}

	public void setActionManager(ActionManager actionManager) {
		this.actionManager = actionManager;
	}
	

}
