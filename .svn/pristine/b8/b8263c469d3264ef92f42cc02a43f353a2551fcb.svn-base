package model;

import events.PageEvent;
import events.PageEvent.PageEventType;
import gui.MainFrame;
import model.elements.SlotDevice;
import state.StateManager;

import javax.swing.*;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;
import java.util.Observer;

public class Page extends Observable implements MutableTreeNode, Serializable, Observer {


    private Document parent = null;
    private String name = null;
    private boolean pageModified;
    private ArrayList<SlotDevice> slotDevices;
    private transient SlotDevice selectSlot = null;
    private transient StateManager stateManager;

    public StateManager getStateManager() {
        return stateManager;
    }


    public Page(Document parent, String name) {
        super();
        this.parent = parent;
        addObserver(parent);
        slotDevices = new ArrayList<SlotDevice>();
        this.stateManager = new StateManager(this);
        this.name = name;
    }


    public void setName(String name) {
        this.name = name;
        notifyObservers(new PageEvent(PageEventType.RENAME_PAGE));
    }

    public String toString() {
        String indicator = pageModified ? "*" : "";
        return indicator + name + "";
    }

    public boolean isPageModified() {
        return pageModified;
    }

    public void setPageModified(boolean pageModified) {
        this.pageModified = pageModified;
        SwingUtilities.updateComponentTreeUI(MainFrame.getInstance().getTree());
    }


    public String getName() {
        return this.name;
    }


    @Override
    public boolean getAllowsChildren() {
        return true;
    }

    @Override
    public boolean isLeaf() {
        return true;
    }

    @Override
    public Enumeration children() {
        return null;
    }

    @Override
    public TreeNode getChildAt(int childIndex) {
        return null;
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public TreeNode getParent() {
        return parent;
    }

    @Override
    public int getIndex(TreeNode node) {
        return 0;
    }


    @Override
    public void update(Observable o, Object arg) {
        if (!this.pageModified) {
            this.setPageModified(true);
        }
    }

    @Override
    public void insert(MutableTreeNode child, int index) {
        // TODO Auto-generated method stub

    }

    @Override
    public void remove(int index) {
        // TODO Auto-generated method stub

    }

    @Override
    public void remove(MutableTreeNode node) {
        // TODO Auto-generated method stub

    }

    @Override
    public void setUserObject(Object object) {
        // TODO Auto-generated method stub

    }

    @Override
    public void removeFromParent() {
        // TODO Auto-generated method stub

    }

    @Override
    public void setParent(MutableTreeNode newParent) {
        // TODO Auto-generated method stub

    }

    @Override
    public void notifyObservers(Object arg) {
        setChanged();
        super.notifyObservers(arg);
    }


    public void addSlotDevice(SlotDevice slot) {
        slotDevices.add(slot);
        notifyObservers(PageEventType.DRAW);
        Document doc = (Document) this.getParent();
        Project p = (Project) doc.getParent();
        p.updatePerformed(null);
        Workspace w = (Workspace) p.getParent();
        w.updatePerformed(null);

    }



    private void notifyObservers(PageEventType draw) {
        setChanged();
        super.notifyObservers(new PageEvent(draw));

    }

    public ArrayList<SlotDevice> getSlotDevices() {
        return slotDevices;
    }

    public SlotDevice getSelectSlot() {
        return selectSlot;
    }

    public void setSelectSlot(SlotDevice selectSlot) {
        this.selectSlot = selectSlot;
    }

    public void startRectangleState() {
        if (stateManager == null) {
            stateManager = new StateManager(this);
        }
        stateManager.setRectangleState();
    }

    public void startTriangleState() {
        if (stateManager == null) {
            stateManager = new StateManager(this);
        }
        stateManager.setTriangleState();
    }

    public void startCircleState() {
        if (stateManager == null) {
            stateManager = new StateManager(this);
        }
        stateManager.setCircleState();
    }

    public void startResizeState() {
        if (stateManager == null) {
            stateManager = new StateManager(this);
        }
        stateManager.setResizeState();
    }

    public void startRotateState() {
        if (stateManager == null) {
            stateManager = new StateManager(this);
        }
        stateManager.setRotateState();
    }

}
