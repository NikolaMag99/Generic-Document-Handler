package state;

import java.awt.Point;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;

import model.Document;
import model.Page;
import model.Project;
import model.Workspace;
import model.elements.SlotDevice;
import view.PageView;

public class RotateState extends State {

	private PageView page;

	public RotateState(PageView pageView) {
		this.page = pageView;
	}

	@Override
	public void mousePressed(MouseEvent event) {
		for(SlotDevice slotDevice:page.getPage().getSlotDevices()) {
			if (slotDevice.getSlotPainter().elementAt(event.getPoint())) {
				page.getPage().setSelectSlot(slotDevice);
				return;
			}
		}
		page.getPage().setSelectSlot(null);
		page.getPage().getSelectedSlots().clear();
	}

	@Override
	public void mouseDragged(MouseEvent event) {
		Point pos = event.getPoint();
		if (page.getPage().getSelectSlot() != null) {
			Point center = new Point(
					page.getPage().getSelectSlot().getPosition().x + page.getPage().getSelectSlot().getDimension().width/2,
					page.getPage().getSelectSlot().getPosition().y+page.getPage().getSelectSlot().getDimension().height/2);
			Shape slotShape = page.getPage().getSelectSlot().getSlotPainter().getOldShape();
			double ang = getAngle(center, pos);
			AffineTransform af = AffineTransform.getRotateInstance(ang, center.x, center.y);

			page.getPage().getSelectSlot().setAngle(ang);
			page.getPage().getSelectSlot().getSlotPainter().setShape(af.createTransformedShape(slotShape));
			
			for (SlotDevice slot : page.getPage().getSelectedSlots()) {
				if(slot!=page.getPage().getSelectSlot()) {
					Point slotCenter = new Point(slot.getPosition().x + slot.getDimension().width/2,
							slot.getPosition().y+slot.getDimension().height/2);
					Shape slotShape2 =slot.getSlotPainter().getOldShape();
					
					 af = AffineTransform.getRotateInstance(ang, slotCenter.x, slotCenter.y);
					
					slot.setAngle(ang);
					slot.getSlotPainter().setShape(af.createTransformedShape(slotShape2));
					
				}
				Document document = (Document)page.getPage().getParent();
				Project proj = (Project) ( document).getParent();
				proj.updatePerformed(null);
				Workspace workspace = (Workspace)proj.getParent();
				workspace.updatePerformed(null);
				
			}

		}

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	private double getAngle(Point slotCenter, Point mousePoint) {
		return Math.atan2(mousePoint.y - slotCenter.y, mousePoint.x - slotCenter.x);
	}

	@Override
	public void mouseMoved(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

}
