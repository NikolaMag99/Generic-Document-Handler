package model;

import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;

import model.elements.SlotDevice;



public class PageSlotSelection implements Transferable, ClipboardOwner{
	
	public static DataFlavor slotFlavor;
	private DataFlavor[] supportedFlavors= {slotFlavor};
	private ArrayList<SlotDevice> pageSlots=new ArrayList<>();
	
	public PageSlotSelection(ArrayList<SlotDevice> slots) {
		pageSlots = slots;
		try {
			slotFlavor = new DataFlavor(Class.forName("java.util.ArrayList"), "Slots");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void lostOwnership(Clipboard clipboard, Transferable contents) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public DataFlavor[] getTransferDataFlavors() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isDataFlavorSupported(DataFlavor flavor) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
		
		if(flavor.equals(slotFlavor)) {
			return pageSlots;
		}else {
			throw new UnsupportedFlavorException(slotFlavor);
		}
	}

}
