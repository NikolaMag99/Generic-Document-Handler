package state;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.text.Document;

import commadns.ResizeCommand;
import enums.Handle;
import model.Page;
import model.Project;
import model.Workspace;
import model.elements.SlotDevice;
import view.PageView;

public class ResizeState extends State {

	private PageView page;
	private SlotDevice selectedSlot = null;
	private Dimension oldDimension = new Dimension(0,0);
	private Dimension newDimension = new Dimension(0, 0);
	private Point oldPoint = new Point(0,0);
	private Point newPoint = new Point(0, 0);
	private ArrayList<Dimension> oldSlotDims = new ArrayList<>();
	private ArrayList<Point> oldSlotPos = new ArrayList<>();
	
	public ResizeState(PageView pageView) {
		this.page = pageView;
	}

	@Override
	public void mousePressed(MouseEvent event) {
		selectedSlot=null;
		oldSlotDims.clear();
		oldSlotPos.clear();
		for(SlotDevice sld : page.getPage().getSelectedSlots()) {
			oldSlotDims.add(sld.getDimension());
			oldSlotPos.add(sld.getPosition());
		}
		for(SlotDevice slotDevice:page.getPage().getSlotDevices()) {
			if(slotDevice.getSlotPainter().elementAt(event.getPoint())) {
				selectedSlot = slotDevice;
				newPoint = oldPoint = selectedSlot.getPosition();
				newDimension = oldDimension = selectedSlot.getDimension();
				page.getPage().setSelectSlot(slotDevice);
				if (!page.getPage().getSelectedSlots().contains(slotDevice)) {
					page.getPage().getSelectedSlots().add(slotDevice);
					oldSlotDims.add(slotDevice.getDimension());
					oldSlotPos.add(slotDevice.getPosition());
				}
				return;
			}
		}
		page.getPage().setSelectSlot(null);
		page.getPage().getSelectedSlots().clear();
	}

	@Override
	public void mouseDragged(MouseEvent event) {
		 selectedSlot = page.getPage().getSelectSlot();
		if (handle == null) {
			return;
		}
			updateSelectedFigure(handle, event.getPoint(), selectedSlot);
		}
		
		
		public void updateSelectedFigure(Handle handle, Point p,SlotDevice selectSlot) {
		page.getPage().getSlotDevices().remove(selectSlot);
		switch (handle) {
		case North:
			newPoint = new Point(oldPoint.x,p.y);
			newDimension = new Dimension(oldDimension.width,(oldPoint.y-p.y)+oldDimension.height);
			break;
		case NorthWest:
			newPoint = p;
			newDimension = new Dimension(oldPoint.x-p.x+oldDimension.width,(oldPoint.y-p.y)+oldDimension.height);
			break;
		case NorthEast:
			newPoint = new Point(oldPoint.x,p.y);
			newDimension = new Dimension((p.x-oldPoint.x),(oldPoint.y-p.y)+oldDimension.height);
			break;
		case South:
			newPoint = oldPoint;
			newDimension = new Dimension(oldDimension.width,p.y-oldPoint.y);
			break;
		case SouthWest:
			newPoint = new Point(p.x,oldPoint.y);
			newDimension = new Dimension(oldPoint.x-p.x+oldDimension.width,p.y-oldPoint.y);
			break;
		case SouthEast:
			newPoint = oldPoint;
			newDimension = new Dimension((p.x-oldPoint.x),p.y-oldPoint.y);
			break;
		case East:
			newPoint = oldPoint;
			newDimension = new Dimension((p.x-oldPoint.x),oldDimension.height);
			break;
		case West:
			newPoint = new Point(p.x,oldPoint.y);
			newDimension = new Dimension(oldPoint.x-p.x+oldDimension.width,oldDimension.height);
			break;
		}
		if (selectedSlot == null)
			return;

		selectSlot.setDimension(newDimension);
		selectSlot.setPosition(newPoint);
		selectSlot.getSlotPainter().draw();
		
		page.getPage().getSlotDevices().add(selectSlot);
		int i = 0;
		for (SlotDevice slot : page.getPage().getSelectedSlots()) {
			if(slot!=selectSlot) {
				slot.setDimension(new Dimension(oldSlotDims.get(i).width + newDimension.width - oldDimension.width,
						oldSlotDims.get(i).height + newDimension.height - oldDimension.height));
				slot.setPosition(new Point(oldSlotPos.get(i).x+newPoint.x-oldPoint.x,
						oldSlotPos.get(i).y+newPoint.y-oldPoint.y));
				slot.getSlotPainter().draw();
			}
			i++;
			
		}
		
		selectSlot.getSlotPainter().draw();
        page.getPage().getSlotDevices().add(selectSlot);
  /*
		Document document = (Document)page.getPage().getParent();
		Project proj = (Project) ((Project) document).getParent();
		proj.updatePerformed(null);
		Workspace workspace = (Workspace)proj.getParent();
		workspace.updatePerformed(null);
 */
	}


	@Override
	public void mouseReleased(MouseEvent e) {
		if (selectedSlot == null)
			return;
		if (newPoint == oldPoint && newDimension == oldDimension)
			return;
		page.getPage().getCommandManager().addCommand(new ResizeCommand(page.getPage(), selectedSlot,
				page.getPage().getSelectedSlots(), oldDimension, oldPoint, oldSlotDims, oldSlotPos, newDimension, newPoint));

	}

	@Override
	public void mouseMoved(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

}
